openapi: 3.0.0
info:
  version: 1.0.0
  title: Back End Demonstration API
  description: A simple blog API.
  contact:
    name: Ko Wing To
    email: 227108934@stu.vtc.edu.hk
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - url: 'https://backend.koto123.repl.co/api'
    description: Development server
tags:
  - name: Cat
    description: Cat api.
  - name: FavoritedCat
    description: FavoritedCat api.
  - name: User
    description: User api.
  - name: Chatrooms
    description: Chatrooms api.
  - name: Messages
    description: Messages api.
paths:
  /addcat:
    post:
      tags:
        - Cat
      summary: Add a new cat
      operationId: addCat
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cat'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /cats:
    get:
      tags:
        - Cat
      summary: Get details of all cats
      operationId: getCats
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cat'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /cats/{id}:
    get:
      tags:
        - Cat
      summary: Get details of a specific cat by its ID
      operationId: getCatById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        '404':
          description: Cat not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
        - Cat
      summary: Update the details of a cat by its ID
      operationId: updateCatById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cat'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cat'
        '404':
          description: Cat not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
        - Cat
      summary: Delete a specific cat by its ID
      operationId: deleteCatById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Cat not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /cats/breed/{breed}:
    get:
      tags:
        - Cat
      summary: Get cats by breed
      operationId: getCatsByBreed
      parameters:
        - name: breed
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cat'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /cats/center/{center}:
    get:
      tags:
        - Cat
      summary: Get cats by center
      operationId: getCatsByCenter
      parameters:
        - name: center
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cat'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /favorite:
    post:
      tags:
        - FavoritedCat
      summary: Create a new favorite cat
      operationId: createFavoriteCat
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FavoritedCat'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /favorite/user/{userId}:
    get:
      tags:
        - FavoritedCat
      summary: Get favorite cats by user ID
      operationId: getFavoriteCatsByUserId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavoritedCat'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /favorite/{userId}/{catId}:
    get:
      tags:
        - FavoritedCat
      summary: Get favorite cats by user ID and cat ID
      operationId: getFavoriteCatsByUserAndCatId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: catId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FavoritedCat'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
        - FavoritedCat
      summary: Delete favorite cat by user and cat ID
      operationId: deleteFavoriteCatByUserAndCatId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: catId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Favorite cat not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /register:
    post:
      tags:
        - User
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                centerLocation:
                  type: string
                signUpCode:
                  type: string
              required:
                - name
                - email
                - password
                - role
    responses:
      '201':
        description: Created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      '400':
        description: Bad Request
        content:
          application/json:
            schema:
              type: object
              properties:
                error:
                  type: string

  /login:
    post:
      tags:
        - User
      summary: Login
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '200':
          description: OK
          headers:
            auth-token:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /all:
    get:
      tags:
        - User
      summary: Get all users
      operationId: getAllUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /me/{id}:
    get:
      tags:
        - User
      summary: Get user by ID
      operationId: getUserById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /addchatrooms:
    post:
      summary: Create a new chatroom
      tags:
        - Chatrooms
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: './chatroom.json'
        required: true
      responses:
        '201':
          description: Chatroom created
          content:
            application/json:
              schema:
                $ref: './chatroom.json'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /chatrooms:
    get:
      summary: Get all chatrooms
      tags:
        - Chatrooms
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './chatroom.json'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /chatrooms/{id}:
    get:
      summary: Get a chatroom by ID
      tags:
        - Chatrooms
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the chatroom to retrieve
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: './chatroom.json'
        '404':
          description: Chatroom not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /chatrooms/user/{userId}:
    get:
      summary: Get a chatroom by userID
      tags:
        - Chatrooms
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
          description: ID of the user to retrieve chatrooms for
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './chatroom.json'
        '404':
          description: Chatroom not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /messages:
    post:
      summary: Create a new message
      tags:
        - Messages
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: './message.json'
        required: true
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                $ref: './message.json'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /messages/{chatroomId}:
    get:
      summary: Get all messages by chatroom
      tags:
        - Messages
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: chatroomId
          schema:
            type: string
          required: true
          description: ID of the chatroom to retrieve messages for
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './message.json'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /messages/{id}:
    delete:
      summary: Delete a message by ID
      tags:
        - Messages
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: ID of the message to delete
      responses:
        '200':
          description: Message deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    
components:
  schemas:
    Cat:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        image:
          type: string
        breed:
          type: string
        gender:
          type: string
          enum:
            - male
            - female
        microchipNo:
          type: string
        birthday:
          type: string
          format: date
        center:
          type: string
        introduction:
          type: string
      required:
        - name
        - image
        - breed
        - gender
        - microchipNo
        - birthday
        - center
        - introduction

        
    FavoritedCat:
      type: object
      properties:
        userId:
          type: string
        catId:
          type: string
      required:
        - userId
        - catId

    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        role:
          type: string
      required:
        - name
        - email
        - role

        
  securitySchemes:
      bearerAuth:          
        type: http
        scheme: bearer
        bearerFormat: JWT   
